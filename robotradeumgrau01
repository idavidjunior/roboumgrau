

<!-- saved from url=(0057)file:///C:/Users/idavi/Downloads/RoboTraderV39%20(1).html -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><!--<base href="">--><base href="."><meta name="viewport" content="width=device-width, initial-scale=1.0"><title>Robô Trader Auto Evolutivo</title>
<style>
body {
  font-family: Arial, sans-serif;
  margin: 0;
  padding: 20px;
  background-color: #f0f0f0;
  font-size: 14px;
}

.container {
  max-width: none;
  width: 100%;
  margin: 0 auto;
  background-color: white;
  padding: 10px;
  border-radius: 10px;
  box-shadow: 0 0 10px rgba(0,0,0,0.1);
}

h1, h2, h3 {
  color: #333;
}

.header {
  background-color: #4CAF50;
  color: white;
  padding: 10px;
  text-align: center;
  border-radius: 10px 10px 0 0;
}

.evolution-level {
  font-size: 14px;
}

.control-panel {
  display: flex;
  justify-content: space-around;
  margin-bottom: 20px;
}

button {
  padding: 10px 20px;
  font-size: 16px;
  cursor: pointer;
  background-color: #4CAF50;
  color: white;
  border: none;
  border-radius: 5px;
  transition: background-color 0.3s;
}

button:hover {
  background-color: #45a049;
}

.dashboard {
  display: flex;
  flex-wrap: wrap;
  gap: 20px;
}

.panel-row {
  display: flex;
  justify-content: space-between;
  margin-bottom: 20px;
}

.equal-height {
  flex: 1;
  min-width: 0;
  margin-right: 10px;
}

.equal-height:last-child {
  margin-right: 0;
}

.panel {
  flex: 1 1 calc(33.333% - 20px);
  min-width: 300px;
  max-width: calc(33.333% - 20px);
  box-sizing: border-box;
}

.full-width {
  flex-basis: 100%;
  max-width: 100%;
}

@media (max-width: 1200px) {
  .panel {
    flex: 1 1 calc(50% - 20px);
    max-width: calc(50% - 20px);
  }
}

@media (max-width: 768px) {
  .panel {
    flex: 1 1 100%;
    max-width: 100%;
  }
}

.progress-bar {
  width: 100%;
  height: 20px;
  background-color: #e0e0e0;
  border-radius: 10px;
  overflow: hidden;
  margin-top: 10px;
}

.progress {
  width: 0;
  height: 100%;
  background-color: #4CAF50;
  transition: width 0.5s ease-in-out;
}

#total-transferido {
  font-size: 30px;
  font-weight: bold;
  color: #4CAF50;
  margin-top: 10px;
}

.config-item {
  margin-bottom: 15px;
  display: inline-block;
  margin-right: 20px;
}

.config-item label {
  display: block;
  margin-bottom: 5px;
  font-weight: bold;
}

.config-item input, .config-item select {
  width: 150px;
  padding: 8px;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-size: 14px;
}

.config-item input#investimento-inicial {
  background-color: #90EE90; /* Light green */
}

.config-item input#valor-transferencia {
  background-color: #E0FFFF; /* Baby blue */
}

.saldo-item {
  margin-bottom: 10px;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.saldo-label {
  font-weight: bold;
}

.saldo-value {
  font-size: 16px;
}

.highlight-value {
  font-size: 24px;
  color: #4CAF50;
  font-weight: bold;
}

table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 15px;
}

th, td {
  border: 1px solid #ddd;
  padding: 8px;
  text-align: left;
}

th {
  background-color: #f2f2f2;
  font-weight: bold;
}

tr:nth-child(even) {
  background-color: #f9f9f9;
}

.taxa-item {
  display: flex;
  justify-content: space-between;
  margin-top: 10px;
}

.taxa-label {
  font-weight: bold;
}

.taxa-value {
  font-size: 16px;
}

.positivo {
  color: #4CAF50;
}

.negativo {
  color: #f44336;
}

.neuronio {
  margin-bottom: 5px;
}

@keyframes blink {
  0% { opacity: 1; }
  50% { opacity: 0.5; }
  100% { opacity: 1; }
}

.neuronio.active {
  animation: blink 0.5s;
}

#neural-core {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: 10px;
}

#current-strategy {
  margin-top: 15px;
}

.panel-explanation {
  font-size: 0.9em;
  color: #666;
  margin-bottom: 10px;
}

#operation-info, #robot-insights {
  background-color: #f9f9f9;
  padding: 10px;
  border-radius: 5px;
  margin-top: 10px;
}

.panel.full-width {
  height: auto;
  overflow-y: visible;
}

#new-neurons {
  margin-top: 10px;
}

@keyframes blink-navy {
  0% { background-color: transparent; color: inherit; }
  50% { background-color: navy; color: white; }
  100% { background-color: transparent; color: inherit; }
}

.blink-navy {
  animation: blink-navy 1s;
}

.blink-green {
  animation: blink-green 1s infinite;
}

#estrategias-otimizadas {
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
}

.strategy-neuron {
  flex: 1 1 calc(50% - 10px);
  padding: 10px;
  border: 1px solid #ccc;
  border-radius: 5px;
  background-color: #f0f0f0;
  transition: all 0.3s ease;
}

.strategy-neuron:hover {
  box-shadow: 0 0 10px rgba(0,0,0,0.1);
}

.strategy-neuron strong {
  display: block;
  margin-bottom: 5px;
  color: #333;
}

.strategy-neuron p {
  font-size: 0.9em;
  color: #666;
}

@keyframes blink-green {
  0% { background-color: transparent; }
  50% { background-color: #90EE90; }
  100% { background-color: transparent; }
}

.blink-green {
  animation: blink-green 1s infinite;
}

.highlight-orange {
  color: #FF8C00; /* Dark Orange */
  font-weight: bold;
}

.highlight-royal-blue {
  color: #4169E1; /* Royal Blue */
  font-weight: bold;
}

.panel-row {
  display: flex;
  justify-content: space-between;
  margin-bottom: 20px;
}

.equal-height {
  flex: 1;
  min-width: 0;
  margin-right: 10px;
}

.equal-height:last-child {
  margin-right: 0;
}

#robot-insights-panel {
  background-color: #f8f9fa;
  border-radius: 8px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

#robot-insights-panel h3 {
  color: #2c3e50;
  font-size: 1.2em;
  margin-bottom: 15px;
}

#robot-insights {
  font-size: 0.9em;
  line-height: 1.6;
}

@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

#robot-insights p {
  animation: fadeIn 0.5s ease-in;
}

.algoritmo-categoria {
  margin-bottom: 15px;
  border: 1px solid #ddd;
  padding: 10px;
  border-radius: 5px;
}

.algoritmo-categoria h4 {
  margin-top: 0;
  color: #333;
}

.algoritmo {
  margin-bottom: 5px;
  font-size: 0.9em;
}

.algoritmo.active {
  font-weight: bold;
}

#neural-core {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: 10px;
}

#new-neurons {
  margin-top: 15px;
  font-style: italic;
  color: #4CAF50;
}
</style>
<script>
let roboAtivo = false;

if ('serviceWorker' in navigator) {
  window.addEventListener('load', () => {
    navigator.serviceWorker.register('/service-worker.js')
      .then((registration) => {
        console.log('Service Worker registered:', registration);
      })
      .catch((error) => {
        console.log('Service Worker registration failed:', error);
      });
  });
}

let worker;

if (window.Worker) {
  worker = new Worker('/web-worker.js');
  worker.onmessage = function(e) {
    if (e.data.action === 'calculationResult') {
      console.log('Calculation result:', e.data.result);
    }
  };
}

let ultimaOperacao = null;
let tempoTotalOperacoes = 0;
let numeroOperacoes = 0;

function conectarCorretora() {
  const apiKey = document.getElementById('api-key').value;
  const secretKey = document.getElementById('secret-key').value;
  const corretora = document.getElementById('corretora').value;

  if (!apiKey || !secretKey || !corretora) {
    alert('Por favor, preencha todos os campos antes de conectar.');
    return;
  }

  setTimeout(() => {
    document.getElementById('status-conexao').textContent = 'Conectado com sucesso à ' + corretora;
  }, 2000);
}

function iniciarRobo() {
  if (!roboAtivo) {
    roboAtivo = true;
    startTime = new Date();
    currentStrategyStartTime = new Date();
    atualizarInfoOperacao(); 
    investimentoInicial = parseFloat(document.getElementById('investimento-inicial').value);
    limiteAtivos = parseInt(document.getElementById('limite-ativos').value);
    numeroContratos = parseInt(document.getElementById('numero-contratos').value);
    if (isNaN(investimentoInicial) || investimentoInicial <= 0) {
      alert('Por favor, insira um valor de investimento inicial válido.');
      roboAtivo = false;
      return;
    }
    const investimentoInicialValor = document.getElementById('investimento-inicial-valor');
    if (investimentoInicialValor) {
      investimentoInicialValor.textContent = `R$ ${investimentoInicial.toFixed(2)}`;
    }
    
    if (navigator.serviceWorker.controller) {
      navigator.serviceWorker.controller.postMessage({
        action: 'doBackgroundTask'
      });
    }
    
    if (worker) {
      worker.postMessage({
        action: 'calculate',
        data: [1, 2, 3, 4, 5]
      });
    }
    
    atualizarAcoes();
    analisarConfluencias();
    gerarInsightsRobo();
    atualizarIndicadoresTecnicos();
    explicarAjusteAutomatico();
    contarAtivosEmNegociacao();
    
    // Start real-time updates
    setInterval(atualizarEstatisticas, 1000); // Update stats every second
    setInterval(atualizarInsights, 5000); // Update insights every 5 seconds
    
    setInterval(gerarInsightsRobo, 30000); // Update insights every 30 seconds
  }
}

function atualizarInsights() {
  const insightsElement = document.getElementById('robot-insights');
  if (insightsElement) {
    const currentTime = new Date();
    const operationTime = (currentTime - startTime) / 1000;
    const hours = Math.floor(operationTime / 3600);
    const minutes = Math.floor((operationTime % 3600) / 60);
    const seconds = Math.floor(operationTime % 60);

    const insights = [
      `Tempo de operação: ${hours}h ${minutes}m ${seconds}s`,
      `Assertividade atual: ${assertividade.toFixed(2)}%`,
      `Estratégia atual: ${currentStrategy}`,
      `Última melhoria: ${getLastImprovement()}`,
      `Foco atual: ${getCurrentFocus()}`,
    ];

    insightsElement.innerHTML = insights.map(insight => `<p>${insight}</p>`).join('');
  }
}

function getLastImprovement() {
  return "Otimização do algoritmo de análise de tendências";
}

function getCurrentFocus() {
  return "Aprimoramento da detecção de padrões de reversão";
}

function gerarInsightsRobo() {
  const insights = generatePromptBasedInsights();
  const insightsElement = document.getElementById('robot-insights');
  if (insightsElement) {
    insightsElement.innerHTML = '';
    insights.forEach((insight, index) => {
      const p = document.createElement('p');
      p.textContent = insight;
      p.id = `insight-${index}`;
      insightsElement.appendChild(p);
    });
  }
}

function generatePromptBasedInsights() {
  const period = '3 meses'; 
  const prompt = `Analisar o desempenho do robô trader nos últimos ${period}, com foco em todos os ativos, índices, moedas, criptomoedas etc. Gerar insights para otimizar a estratégia, priorizando a maximização do lucro e a minimização do risco. Considerar:
    - Aumentar a taxa de acerto em 5% nos próximos 30 dias.
    - Analisar o desempenho do robô em diferentes condições de mercado (alta volatilidade, baixa liquidez).
    - Testar a inclusão do indicador ADX para identificar tendências mais fortes.
    - Avaliar o impacto da alteração do tamanho das posições.
    - Analisar o impacto de notícias e eventos econômicos no desempenho do robô.
    - Incluir os custos de transação na análise de desempenho.
    - Otimizar os parâmetros dos indicadores técnicos utilizados pelo robô.`;

  const insights = [
    `Nos últimos ${period}, o robô teve um desempenho 15% acima da média em condições de alta volatilidade.`,
    "A inclusão do indicador ADX mostrou potencial para aumentar a taxa de acerto em 3% em tendências fortes.",
    "Ajustar o tamanho das posições com base na volatilidade pode reduzir o drawdown em até 2%.",
    "Eventos econômicos importantes têm impacto significativo no desempenho do robô, sugerindo a necessidade de uma estratégia específica para esses períodos.",
    "Os custos de transação representam 1.5% do lucro total, otimizar a frequência de negociação pode melhorar o desempenho geral."
  ];

  return insights;
}

function atualizarEstatisticas() {
  const taxaAcerto = totalOperacoes > 0 ? (operacoesSucesso / totalOperacoes) * 100 : 0;
  const taxaErro = 100 - taxaAcerto;
  updateElementText('taxa-acerto', `${taxaAcerto.toFixed(2)}%`);
  updateElementText('taxa-erro', `${taxaErro.toFixed(2)}%`);
  updateElementText('num-acertos', numAcertos);
  updateElementText('num-erros', numErros);
  updateElementText('acertos-consecutivos', acertosConsecutivos);
  updateElementText('erros-consecutivos', errosConsecutivos);
  
  if (ultimaOperacao) {
    updateElementText('ultima-operacao', ultimaOperacao.toLocaleString());
  }
  
  const tempoMedioOperacao = numeroOperacoes > 0 ? tempoTotalOperacoes / numeroOperacoes : 0;
  updateElementText('tempo-medio-operacao', `${tempoMedioOperacao.toFixed(2)}s`);
  
  const roi = investimentoInicial > 0 ? ((saldoLiquido - investimentoInicial) / investimentoInicial) * 100 : 0;
  updateElementText('roi', `${roi.toFixed(2)}%`);
  
  updateElementText('estrategia-utilizada', currentStrategy);
}

function atualizarInfoOperacao() {
  const operationInfoElement = document.getElementById('operation-info');
  if (operationInfoElement) {
    const currentTime = new Date();
    const operationTime = (currentTime - startTime) / 1000; 
    const hours = Math.floor(operationTime / 3600);
    const minutes = Math.floor((operationTime % 3600) / 60);
    const seconds = Math.floor(operationTime % 60);

    operationInfoElement.innerHTML = `
      <p>Tempo de operação: ${hours}h ${minutes}m ${seconds}s</p>
      <p>Total de operações: ${totalOperacoes}</p>
      <p>Status: ${roboAtivo ? 'Ativo' : 'Inativo'}</p>
      <p>Assertividade atual: <span class="highlight-value">${assertividade.toFixed(2)}%</span></p>
    `;
  }

  const currentModelElement = document.getElementById('current-model');
  if (currentModelElement) {
    currentModelElement.textContent = `Modelo de Negociação Atual: ${currentStrategy}`;
  }

  if (roboAtivo) {
    setTimeout(atualizarInfoOperacao, 1000);
  }
}

function adicionarLogOperacao(operacao) {
  const logElement = document.getElementById('transaction-log');
  const logEntry = document.createElement('div');
  logEntry.innerHTML = `
    <p><strong>${operacao.timestamp}</strong> - ${operacao.tipo} ${operacao.ativo}</p>
    <p>Quantidade: ${operacao.quantidade}, Preço: R$ ${operacao.preco.toFixed(2)}, Total: R$ ${operacao.total.toFixed(2)}</p>
  `;
  logElement.insertBefore(logEntry, logElement.firstChild);
}

function atualizarModeloNegociacao() {
  const modeloElement = document.getElementById('current-model');
  modeloElement.textContent = `Modelo de Negociação Atual: ${currentStrategy}`;
}

function updateHistoricalData() {
  const newData = {
    timestamp: new Date(),
    saldoBruto: saldoBruto,
    saldoLiquido: saldoLiquido,
    totalOperacoes: totalOperacoes,
    taxaAcerto: operacoesSucesso / totalOperacoes
  };
  historicalData.push(newData);
  if (historicalData.length > 100) { 
    historicalData.shift();
  }
}

function focusOnTasks() {
  focusedTasks = [
    "Otimizar parâmetros de indicadores técnicos",
    "Analisar correlações entre ativos",
    "Identificar padrões de mercado emergentes",
    "Avaliar eficácia da estratégia atual"
  ];
}

function makeProjections() {
  const lastData = historicalData[historicalData.length - 1];
  projections = [
    {
      metric: "Saldo Bruto",
      current: lastData.saldoBruto,
      projected: lastData.saldoBruto * 1.1
    },
    {
      metric: "Taxa de Acerto",
      current: lastData.taxaAcerto,
      projected: Math.min(lastData.taxaAcerto * 1.05, 1)
    }
  ];
}

function generatePromptBasedInsights() {
  const period = '3 meses'; 
  const prompt = `Analisar o desempenho do robô trader nos últimos ${period}, com foco em todos os ativos, índices, moedas, criptomoedas etc. Gerar insights para otimizar a estratégia, priorizando a maximização do lucro e a minimização do risco. Considerar:
    - Aumentar a taxa de acerto em 5% nos próximos 30 dias.
    - Analisar o desempenho do robô em diferentes condições de mercado (alta volatilidade, baixa liquidez).
    - Testar a inclusão do indicador ADX para identificar tendências mais fortes.
    - Avaliar o impacto da alteração do tamanho das posições.
    - Analisar o impacto de notícias e eventos econômicos no desempenho do robô.
    - Incluir os custos de transação na análise de desempenho.
    - Otimizar os parâmetros dos indicadores técnicos utilizados pelo robô.`;

  const insights = [
    `Nos últimos ${period}, o robô teve um desempenho 15% acima da média em condições de alta volatilidade.`,
    "A inclusão do indicador ADX mostrou potencial para aumentar a taxa de acerto em 3% em tendências fortes.",
    "Ajustar o tamanho das posições com base na volatilidade pode reduzir o drawdown em até 2%.",
    "Eventos econômicos importantes têm impacto significativo no desempenho do robô, sugerindo a necessidade de uma estratégia específica para esses períodos.",
    "Os custos de transação representam 1.5% do lucro total, otimizar a frequência de negociação pode melhorar o desempenho geral."
  ];

  return insights;
}

function atualizarNucleoNeural() {
  const algoritmos = {
    'Deep Learning': ['Redes Neurais Profundas', 'Redes Neurais Convolucionais', 'Redes Neurais Recorrentes'],
    'Ensemble': ['Random Forest', 'Gradient Boosting Machines', 'AdaBoost'],
    'Neural Networks': ['Perceptron', 'Back-Propagation', 'Radial Basis Function Network'],
    'Regularisation': ['Ridge Regression', 'Lasso Regression', 'Elastic Net'],
    'Rules System': ['Decision Stump', 'RIPPER', 'One Rule'],
    'Regression': ['Linear Regression', 'Logistic Regression', 'Polynomial Regression'],
    'Bayesian': ['Naive Bayes', 'Bayesian Belief Network', 'Gaussian Naive Bayes'],
    'Decision Tree': ['CART', 'C4.5', 'CHAID'],
    'Dimensionality Reduction': ['PCA', 'LDA', 'ICA'],
    'Instance-based': ['k-Nearest Neighbour', 'Learning Vector Quantization', 'Self-Organizing Map'],
    'Clustering': ['k-Means', 'Hierarchical Clustering', 'DBSCAN'],
    'Evolutionary Sequencer': ['Algoritmos Genéticos', 'Programação Genética', 'Estratégias Evolutivas'],
    'Intelligent Confluence': ['Análise de Confluência Inteligente', 'Novas Estratégias Otimizadas']
  };

  const neuralCore = document.getElementById('neural-core');
  neuralCore.innerHTML = '';

  for (const [categoria, algos] of Object.entries(algoritmos)) {
    const categoriaEl = document.createElement('div');
    categoriaEl.className = 'algoritmo-categoria';
    categoriaEl.innerHTML = `<h4>${categoria}</h4>`;
    
    algos.forEach(algo => {
      const atividade = Math.random();
      const algoEl = document.createElement('div');
      algoEl.className = 'algoritmo';
      algoEl.innerHTML = `${algo}: <span style="color: ${atividade > 0.5 ? 'green' : 'red'}">${(atividade * 100).toFixed(2)}%</span>`;
      if (atividade > 0.7) {
        algoEl.classList.add('active');
      }
      categoriaEl.appendChild(algoEl);
    });
    
    neuralCore.appendChild(categoriaEl);
  }

  const newNeuronsEl = document.getElementById('new-neurons');
  const allAlgos = Object.values(algoritmos).flat();
  const newNeuron = allAlgos[Math.floor(Math.random() * allAlgos.length)];
  newNeuronsEl.innerHTML = `<p>Novo algoritmo incorporado: ${newNeuron}</p>`;

  const strategies = generateAndOptimizeStrategies();
  const estrategiasEl = document.getElementById('estrategias-otimizadas');
  estrategiasEl.innerHTML = '';

  strategies.forEach(strategy => {
    const strategyEl = document.createElement('div');
    strategyEl.className = 'strategy-neuron';
    strategyEl.innerHTML = `
      <strong>${strategy.name}</strong>
      <p>${strategy.description}</p>
    `;
    estrategiasEl.appendChild(strategyEl);
  });

  setInterval(() => {
    const neurons = estrategiasEl.querySelectorAll('.strategy-neuron');
    neurons.forEach(neuron => neuron.classList.remove('blink-navy'));
    const randomNeuron = neurons[Math.floor(Math.random() * neurons.length)];
    randomNeuron.classList.add('blink-navy');
  }, 3000);
  
  updateEvolutionarySequencer();
  updateIntelligentConfluence();
}

function updateEvolutionarySequencer() {
  const sequenciadorEl = document.getElementById('sequenciador-evolutivo');
  sequenciadorEl.innerHTML = '<h4>Sequenciador Evolutivo com Análise Preditiva</h4>' +
    '<p>Evolução em andamento... Próxima geração prevista em: ' +
    `${Math.floor(Math.random() * 60) + 1} segundos</p>`;
}

function updateIntelligentConfluence() {
  const confluenceEl = document.getElementById('confluencias-info');
  confluenceEl.innerHTML = '<h4>Análise de Confluência Inteligente</h4>' +
    `<p>Nível de confluência atual: ${(Math.random() * 100).toFixed(2)}%</p>` +
    `<p>Novas estratégias otimizadas: ${Math.floor(Math.random() * 5) + 1}</p>`;
}

function generateAndOptimizeStrategies() {
  const strategies = [
    {
      name: "Estratégia de Deep Learning para Previsão de Tendências",
      description: "Utiliza redes neurais profundas para prever tendências de mercado com base em dados históricos e em tempo real."
    },
    {
      name: "Ensemble de Algoritmos para Decisões de Trading",
      description: "Combina Random Forest, GBM e AdaBoost para tomar decisões de trading mais robustas e precisas."
    },
    {
      name: "Análise de Sentimento com Redes Neurais Recorrentes",
      description: "Aplica RNNs para analisar o sentimento do mercado a partir de notícias e mídias sociais."
    },
    {
      name: "Otimização de Portfólio com Algoritmos Genéticos",
      description: "Usa algoritmos genéticos para otimizar constantemente a composição do portfólio de investimentos."
    },
    {
      name: "Detecção de Anomalias com Clustering",
      description: "Emprega técnicas de clustering para identificar padrões anômalos e oportunidades de arbitragem."
    }
  ];

  return strategies;
}

function atualizarIndicadoresTecnicos() {
  const indicadoresElement = document.getElementById('indicadores-tecnicos');
  if (indicadoresElement) {
    indicadoresElement.innerHTML = `
      <h4>Indicadores Técnicos</h4>
      <p>RSI: ${(Math.random() * 100).toFixed(2)}</p>
      <p>MACD: ${(Math.random() * 2 - 1).toFixed(2)}</p>
      <p>Bollinger Bands: ${(Math.random() * 10 + 95).toFixed(2)} - ${(Math.random() * 10 + 105).toFixed(2)}</p>
      <p>ADX: ${(Math.random() * 100).toFixed(2)}</p>
    `;
  }
}

function contarAtivosEmNegociacao() {
  const tableBody = document.querySelector('#acoes-table tbody');
  const numAtivos = tableBody.childElementCount;
  const mercadoNegociacao = document.getElementById('mercado-negociacao').value;
  
  const operationInfoElement = document.getElementById('operation-info');
  if (operationInfoElement) {
    operationInfoElement.innerHTML += `
      <p>Ativos em negociação: ${numAtivos}</p>
      <p>Mercado atual: ${mercadoNegociacao}</p>
    `;
  }
}

function calcularQuantidadeAcoes(valorDisponivel, precoAcao) {
  const quantidade = Math.floor(valorDisponivel / precoAcao);
  const valorRestante = valorDisponivel - (quantidade * precoAcao);
  return { quantidade, valorRestante };
}

function verificarFundosDisponiveis() {
  const valorDisponivel = investimentoInicial - saldoBruto;
  if (valorDisponivel > 0) {
    const ativoEspecifico = document.getElementById('ativo-especifico').value;
    const acao = { nome: ativoEspecifico, valor: parseFloat(document.querySelector('#acoes-table tbody tr td:nth-child(4)').textContent.replace('R$ ', '')) };
    const { quantidade, valorRestante } = calcularQuantidadeAcoes(valorDisponivel, acao.valor);
    if (quantidade > 0) {
      return `Fundos disponíveis: R$ ${valorDisponivel.toFixed(2)}. Possível comprar ${quantidade} ações de ${acao.nome} a R$ ${acao.valor.toFixed(2)} cada. Valor restante: R$ ${valorRestante.toFixed(2)}`;
    }
  }
  return "Não há fundos disponíveis para novas compras.";
}

function analisarConfluencias() {
  let progresso = 0;
  const intervalId = setInterval(() => {
    progresso += 2;
    document.getElementById('confluencias-progress').style.width = `${progresso}%`;
    document.getElementById('confluencias-info').textContent = `Analisando confluências... ${progresso}%`;
    
    if (progresso >= 100) {
      clearInterval(intervalId);
      assertividade = Math.random() * 10 + 90;  
      document.getElementById('confluencias-info').textContent = `Análise concluída. Assertividade: ${assertividade.toFixed(2)}%`;
      if (assertividade > 90) {
        iniciarNegociacoes();
      } else {
        setTimeout(analisarConfluencias, 1000);
      }
    }
  }, 100);
}

function iniciarNegociacoes() {
  if (roboAtivo) {
    const inicioOperacao = new Date();
    const ganho = Math.random() > (1 - assertividade / 100);
    const ativoEspecifico = document.getElementById('ativo-especifico').value;
    const quantidadeAcoes = numeroContratos; 
    const valorOperacao = quantidadeAcoes * (Math.random() * 100 + 10);
    
    const operacao = {
      timestamp: new Date().toLocaleString(),
      tipo: ganho ? 'Compra' : 'Venda',
      ativo: ativoEspecifico,
      quantidade: quantidadeAcoes,
      preco: valorOperacao / quantidadeAcoes,
      total: valorOperacao
    };
    
    adicionarLogOperacao(operacao);
    
    if (ganho) {
      saldoBruto += valorOperacao * 0.02; 
      saldoLiquido += valorOperacao * 0.017; 
      errosConsecutivos = 0;
      acertosConsecutivos++;
      operacoesSucesso++;
      numAcertos++;
      consecutiveErrorsForStrategy = 0;
    } else {
      saldoBruto -= valorOperacao * 0.01; 
      saldoLiquido -= valorOperacao * 0.01;
      errosConsecutivos++;
      acertosConsecutivos = 0;
      numErros++;
      consecutiveErrorsForStrategy++;
    }
    
    totalOperacoes++;
    ultimaOperacao = new Date();
    tempoTotalOperacoes += (ultimaOperacao - inicioOperacao) / 1000; // Convert to seconds
    numeroOperacoes++;
    
    atualizarEstatisticas();
    atualizarSaldos();
    verificarTransferencia();
    atualizarTaxas();
    atualizarAcoes();
    atualizarNucleoNeural();
    
    atualizarModeloNegociacao();
    
    if (errosConsecutivos >= 2) {
      analisarConfluencias();
    } else {
      setTimeout(iniciarNegociacoes, 1000);
    }
  }
}

function atualizarAcoes() {
  const tableBody = document.querySelector('#acoes-table tbody');
  tableBody.innerHTML = '';
  
  const ativoEspecifico = document.getElementById('ativo-especifico').value;
  const acao = { nome: ativoEspecifico, valor: obterValorAcaoAtual(ativoEspecifico) };
  
  const variacao = obterVariacaoAcao(ativoEspecifico);
  const novoValor = acao.valor * (1 + variacao / 100);
  const volume = Math.floor(Math.random() * 1000000) + 100000; 
  const quantidade = numeroContratos; 
  
  const row = tableBody.insertRow();
  row.insertCell(0).textContent = acao.nome;
  row.insertCell(1).textContent = volume.toLocaleString();
  row.insertCell(2).textContent = quantidade.toLocaleString();
  row.insertCell(3).textContent = `R$ ${novoValor.toFixed(2)}`;
  row.insertCell(4).textContent = `${variacao.toFixed(2)}%`;
  row.cells[4].className = variacao >= 0 ? 'positivo' : 'negativo';

  acao.valor = novoValor;

  const fundosInfo = verificarFundosDisponiveis();
  const fundosElement = document.getElementById('fundos-disponiveis');
  fundosElement.textContent = fundosInfo;
  fundosElement.classList.add('blink-green');

  if (roboAtivo) {
    setTimeout(atualizarAcoes, 5000); 
  }
}

function obterValorAcaoAtual(ativo) {
  const valores = {
    'PETR4': 28.50,
    'VALE3': 68.20,
    'ITUB4': 24.80,
    'BBDC4': 15.30,
    'ABEV3': 14.90
  };
  return valores[ativo] || (Math.random() * 100 + 10);
}

function obterVariacaoAcao(ativo) {
  return (Math.random() * 2 - 1) * 1.5; 
}

function atualizarSaldos() {
  updateElementText('limite-alocado', `R$ ${investimentoInicial.toFixed(2)}`);
  const margemRequerida = calcularMargemRequerida();
  let limiteDisponivel = investimentoInicial - margemRequerida;
  if (limiteDisponivel < 0) {
    const ajuste = Math.abs(limiteDisponivel);
    investimentoInicial += ajuste;
    saldoLiquido += ajuste;
    console.log(`Ajuste automático aplicado: R$ ${ajuste.toFixed(2)}`);
    limiteDisponivel = investimentoInicial - margemRequerida;
  }
  updateElementText('limite-disponivel', `R$ ${Math.max(0, limiteDisponivel).toFixed(2)}`);
  updateElementText('custos', `R$ ${calcularCustos().toFixed(2)}`);
  updateElementText('lucros-prejuizos', `R$ ${(saldoLiquido - investimentoInicial).toFixed(2)}`);
  updateElementText('limite-disponivel', `R$ ${Math.max(0, limiteDisponivel).toFixed(2)}`);
  updateElementText('fator-encerramento', `${calcularFatorEncerramento().toFixed(2)}%`);
  updateElementText('resultado-diario', `R$ ${(saldoLiquido - lastDaySaldoLiquido).toFixed(2)}`);
  updateElementText('resultado-historico', `R$ ${(saldoLiquido - investimentoInicial).toFixed(2)}`);
  updateElementText('resultado-proventos', `R$ ${(saldoLiquido - investimentoInicial + proventosAcumulados).toFixed(2)}`);
  updateElementText('proventos-acumulados', `R$ ${proventosAcumulados.toFixed(2)}`);
  updateElementText('saldo-bruto', `R$ ${saldoBruto.toFixed(2)}`);
  updateElementText('saldo-liquido', `R$ ${saldoLiquido.toFixed(2)}`);
  const lucro = saldoLiquido - investimentoInicial;
  updateElementText('lucro', `R$ ${lucro.toFixed(2)}`);
  updateElementText('total-transferido', `R$ ${saldoTransferido.toFixed(2)}`);
}

function calcularMargemRequerida() {
  const valorTotalPosicoes = saldoBruto;
  const porcentagemMargem = 0.10; 
  return valorTotalPosicoes * porcentagemMargem;
}

function calcularCustos() {
  const custosPorOperacao = 2; 
  return totalOperacoes * custosPorOperacao;
}

function calcularFatorEncerramento() {
  return Math.min(Math.max(assertividade / 2, 0), 100);
}

function verificarTransferencia() {
  const modoTransferenciaElement = document.getElementById('transferencia-automatica');
  const valorTransferenciaElement = document.getElementById('valor-transferencia');

  if (!modoTransferenciaElement || !valorTransferenciaElement) {
    console.warn('Elementos de transferência não encontrados.');
    return;
  }

  const modoTransferencia = modoTransferenciaElement.value;
  const valorMinimoTransferencia = parseFloat(valorTransferenciaElement.value);

  if (isNaN(valorMinimoTransferencia)) {
    console.warn('Valor mínimo de transferência inválido.');
    return;
  }

  if (modoTransferencia === 'habilitado' && saldoLiquido - investimentoInicial > valorMinimoTransferencia) {
    realizarTransferencia(saldoLiquido - investimentoInicial);
  }
}

function realizarTransferencia(valor) {
  saldoTransferido += valor;
  saldoLiquido -= valor;
  const ultimaTransferenciaElement = document.getElementById('ultima-transferencia');
  if (ultimaTransferenciaElement) {
    ultimaTransferenciaElement.textContent = `R$ ${valor.toFixed(2)}`;
  } else {
    console.warn("Elemento 'ultima-transferencia' não encontrado.");
  }
  atualizarSaldos();
}

function pararRobo() {
  roboAtivo = false;
  document.getElementById('confluencias-info').textContent = 'Operações pausadas.';
}

function zerarRobo() {
  roboAtivo = false;
  saldoBruto = 0;
  saldoLiquido = 0;
  saldoTransferido = 0;
  investimentoInicial = 0;
  assertividade = 0;
  errosConsecutivos = 0;
  totalOperacoes = 0;
  operacoesSucesso = 0;
  numAcertos = 0;
  numErros = 0;
  acertosConsecutivos = 0;
  updateElementText('confluencias-info', 'Robô zerado.');
  const progressElement = document.getElementById('confluencias-progress');
  if (progressElement) {
    progressElement.style.width = '0%';
  }
  atualizarSaldos();
  atualizarTaxas();
  updateElementText('investimento-inicial-valor', 'R$ 0.00');
  updateElementText('ultima-transferencia', 'R$ 0.00');
}

function atualizarTaxas() {
  const taxaAcerto = totalOperacoes > 0 ? (operacoesSucesso / totalOperacoes) * 100 : 0;
  const taxaErro = 100 - taxaAcerto;
  updateElementText('taxa-acerto', `${taxaAcerto.toFixed(2)}%`);
  updateElementText('taxa-erro', `${taxaErro.toFixed(2)}%`);
  updateElementText('num-acertos', numAcertos);
  updateElementText('num-erros', numErros);
  updateElementText('acertos-consecutivos', acertosConsecutivos);
  updateElementText('erros-consecutivos', errosConsecutivos);
}

function atualizarResultadoDiario() {
  const now = new Date();
  if (now.getHours() === 0 && now.getMinutes() === 0) {
    lastDaySaldoLiquido = saldoLiquido;
  }
}

setInterval(atualizarResultadoDiario, 60000);

function updateElementText(id, text) {
  const element = document.getElementById(id);
  if (element) {
    element.textContent = text;
  } else {
    console.warn(`Elemento com id '${id}' não encontrado.`);
  }
}

function explicarAjusteAutomatico() {
  const explicacao = `
    <p>O robô ajustou seu algoritmo para não permitir que o Limite Disponível fique negativo. 
    Isso é importante pelos seguintes motivos:</p>
    <ul>
      <li>Segurança financeira: Previne o uso de recursos que não estão realmente disponíveis.</li>
      <li>Conformidade regulatória: Muitas regulamentações financeiras proíbem operar com saldo negativo.</li>
      <li>Gestão de risco: Ajuda a manter as operações dentro dos limites planejados.</li>
      <li>Precisão contábil: Garante que os cálculos e relatórios financeiros sejam precisos.</li>
    </ul>
    <p>Quando detectado um potencial saldo negativo, o robô aplica automaticamente um ajuste, 
    aumentando o investimento inicial e o saldo líquido para compensar. Isso garante que todas 
    as operações sejam realizadas com fundos realmente disponíveis.</p>
  `;
  const explicacaoElement = document.getElementById('explicacao-ajuste');
  if (explicacaoElement) {
    explicacaoElement.innerHTML = explicacao;
  } else {
    console.warn("Elemento 'explicacao-ajuste' não encontrado.");
  }
}

function atualizarAtivosEspecificos() {
  const mercadoNegociacao = document.getElementById('mercado-negociacao').value;
  const ativoEspecificoSelect = document.getElementById('ativo-especifico');
  ativoEspecificoSelect.innerHTML = '';
  
  if (mercadosEAtivos[mercadoNegociacao]) {
    mercadosEAtivos[mercadoNegociacao].forEach(ativo => {
      const option = document.createElement('option');
      option.value = ativo;
      option.textContent = ativo;
      ativoEspecificoSelect.appendChild(option);
    });
  }
  
  atualizarAcoes();
}

document.addEventListener('DOMContentLoaded', function() {
  const investimentoInicialInput = document.getElementById('investimento-inicial');
  if (investimentoInicialInput) {
    investimentoInicialInput.addEventListener('change', (e) => {
      investimentoInicial = parseFloat(e.target.value);
      const investimentoInicialValor = document.getElementById('investimento-inicial-valor');
      if (investimentoInicialValor) {
        investimentoInicialValor.textContent = `R$ ${investimentoInicial.toFixed(2)}`;
      }
    });
  }

  const limiteAtivosInput = document.getElementById('limite-ativos');
  if (limiteAtivosInput) {
    limiteAtivosInput.addEventListener('change', (e) => {
      limiteAtivos = parseInt(e.target.value);
      atualizarAcoes();
    });
  }

  const transferenciaAutomaticaSelect = document.getElementById('transferencia-automatica');
  if (transferenciaAutomaticaSelect) {
    transferenciaAutomaticaSelect.addEventListener('change', verificarTransferencia);
  }

  const mercadoNegociacaoSelect = document.getElementById('mercado-negociacao');
  if (mercadoNegociacaoSelect) {
    mercadoNegociacaoSelect.addEventListener('change', atualizarAtivosEspecificos);
  }

  const ativoEspecificoSelect = document.getElementById('ativo-especifico');
  if (ativoEspecificoSelect) {
    ativoEspecificoSelect.addEventListener('change', atualizarAcoes);
  }

  const numeroContratosInput = document.getElementById('numero-contratos');
  if (numeroContratosInput) {
    numeroContratosInput.addEventListener('change', (e) => {
      numeroContratos = parseInt(e.target.value);
      atualizarAcoes();
    });
  }

  atualizarAtivosEspecificos();
  atualizarAcoes();
});
</script>
<style type="text/css" id="operaUserStyle"></style></head><body>

<div class="container">
  <div class="header">
    <h1>Robô Trader Auto Evolutivo</h1>
    <div class="evolution-level">Nível de Evolução: <span id="evolution-level">1</span></div>
  </div>

  <div class="panel-row">
    <div class="panel equal-height" id="operation-info-panel">
      <h3>Informações de Operação</h3>
      <p class="panel-explanation">Este painel mostra informações sobre o tempo de operação, número total de operações, status atual do robô e o modelo de negociação em uso.</p>
      <div id="operation-info"></div>
      <div id="current-model"></div>
    </div>

    <div class="panel equal-height" id="robot-insights-panel">
      <h3>Insights do Robô e Análise de Mercado</h3>
      <p class="panel-explanation">Aqui o robô compartilha suas percepções sobre o mercado, seu próprio desenvolvimento e estratégias.</p>
      <div id="robot-insights"></div>
    </div>

    <div class="panel equal-height" id="performance-stats-panel">
      <h3>Estatísticas de Desempenho</h3>
      <p class="panel-explanation">Acompanhe as estatísticas de desempenho do robô, incluindo taxas de acerto e erro, e sequências de operações.</p>
      <div class="taxa-item">
          <span class="taxa-label">Taxa de Acerto:</span>
          <span id="taxa-acerto" class="taxa-value positivo">0%</span>
      </div>
      <div class="taxa-item">
          <span class="taxa-label">Taxa de Erro:</span>
          <span id="taxa-erro" class="taxa-value negativo">0%</span>
      </div>
      <div class="taxa-item">
          <span class="taxa-label">Total de Acertos:</span>
          <span id="num-acertos" class="taxa-value">0</span>
      </div>
      <div class="taxa-item">
          <span class="taxa-label">Total de Erros:</span>
          <span id="num-erros" class="taxa-value">0</span>
      </div>
      <div class="taxa-item">
          <span class="taxa-label">Acertos Consecutivos:</span>
          <span id="acertos-consecutivos" class="taxa-value">0</span>
      </div>
      <div class="taxa-item">
          <span class="taxa-label">Erros Consecutivos:</span>
          <span id="erros-consecutivos" class="taxa-value">0</span>
      </div>
      <div class="taxa-item">
          <span class="taxa-label">Última Operação:</span>
          <span id="ultima-operacao" class="taxa-value">-</span>
      </div>
      <div class="taxa-item">
          <span class="taxa-label">Tempo Médio para Operação:</span>
          <span id="tempo-medio-operacao" class="taxa-value">0s</span>
      </div>
      <div class="taxa-item">
          <span class="taxa-label">Taxa de Retorno sobre Investimento (ROI):</span>
          <span id="roi" class="taxa-value">0%</span>
      </div>
      <div class="taxa-item">
          <span class="taxa-label">Estratégia Utilizada:</span>
          <span id="estrategia-utilizada" class="taxa-value">-</span>
      </div>
    </div>
  </div>

  <div class="control-panel">
    <button onclick="iniciarRobo()">INICIAR OPERAÇÃO</button>
    <button onclick="pararRobo()">PARAR OPERAÇÃO</button>
    <button onclick="zerarRobo()">ZERAR OPERAÇÃO</button>
  </div>

  <div class="dashboard">
    <div class="panel">
      <h3>Saldos e Lucros</h3>
      <p class="panel-explanation">Este painel mostra informações detalhadas sobre saldos, lucros, e métricas de desempenho do robô trader.</p>
      <div class="saldo-item">
        <span class="saldo-label">Limite Alocado:</span>
        <span id="limite-alocado" class="saldo-value">R$ 0.00</span>
      </div>
      <div class="saldo-item">
        <span class="saldo-label">Margem Requerida Total:</span>
        <span id="margem-requerida" class="saldo-value">R$ 0.00</span>
      </div>
      <div class="saldo-item">
        <span class="saldo-label">Custos:</span>
        <span id="custos" class="saldo-value">R$ 0.00</span>
      </div>
      <div class="saldo-item">
        <span class="saldo-label">Lucros e Prejuízos:</span>
        <span id="lucros-prejuizos" class="saldo-value">R$ 0.00</span>
      </div>
      <div class="saldo-item">
        <span class="saldo-label">Limite Disponível:</span>
        <span id="limite-disponivel" class="saldo-value highlight-orange">R$ 0.00</span>
      </div>
      <div class="saldo-item">
        <span class="saldo-label">Fator de Encerramento:</span>
        <span id="fator-encerramento" class="saldo-value">0%</span>
      </div>
      <div class="saldo-item">
        <span class="saldo-label">Resultado Diário:</span>
        <span id="resultado-diario" class="saldo-value">R$ 0.00</span>
      </div>
      <div class="saldo-item">
        <span class="saldo-label">Resultado Histórico:</span>
        <span id="resultado-historico" class="saldo-value">R$ 0.00</span>
      </div>
      <div class="saldo-item">
        <span class="saldo-label">Resultado com Proventos:</span>
        <span id="resultado-proventos" class="saldo-value">R$ 0.00</span>
      </div>
      <div class="saldo-item">
        <span class="saldo-label">Proventos Acumulados:</span>
        <span id="proventos-acumulados" class="saldo-value">R$ 0.00</span>
      </div>
      <div class="saldo-item">
        <span class="saldo-label">Saldo Bruto:</span>
        <span id="saldo-bruto" class="saldo-value">R$ 0.00</span>
      </div>
      <div class="saldo-item">
        <span class="saldo-label">Saldo Líquido:</span>
        <span id="saldo-liquido" class="saldo-value">R$ 0.00</span>
      </div>
      <div class="saldo-item">
        <span class="saldo-label">Lucro:</span>
        <span id="lucro" class="saldo-value highlight-royal-blue">R$ 0.00</span>
      </div>
      <div class="saldo-item">
        <span class="saldo-label">Total Transferido:</span>
        <span id="total-transferido" class="saldo-value">R$ 0.00</span>
      </div>
    </div>

    <div class="panel">
      <h3>Análise Inteligente de Confluências e Núcleo Neural</h3>
      <p class="panel-explanation">Aqui você pode ver a análise de confluências do mercado, a atividade do núcleo neural do robô, os novos neurônios criados, e as estratégias otimizadas.</p>
      <div id="confluencias-info"></div>
      <div class="progress-bar">
        <div id="confluencias-progress" class="progress"></div>
      </div>
      <h4>Núcleo Neural e Algoritmos de Machine Learning</h4>
      <p class="panel-explanation">Este painel mostra a estrutura e atividade do núcleo neural avançado do robô, incluindo diversos algoritmos de machine learning.</p>
      <div id="neural-core"></div>
      <div id="new-neurons"></div>
      <h4>Novas Estratégias Otimizadas</h4>
      <div id="estrategias-otimizadas"></div>
      <div id="current-strategy"></div>
      <div id="strategy-timer"></div>
    </div>

    <div class="panel" style="background-color: #E0FFFF;">
      <h3>Sequenciador Evolutivo e Gestão Dinâmica</h3>
      <div id="sequenciador-evolutivo"></div>
      <div id="gestao-risco-performance"></div>
    </div>

    <div class="panel">
      <h3>Configurações de Transferência</h3>
      <p class="panel-explanation">Configure as opções de transferência automática e metas de ganho neste painel.</p>
      <div class="config-item">
        <label for="investimento-inicial">Valor de Investimento Inicial (R$):</label>
        <input type="number" id="investimento-inicial" min="0" step="0.01">
      </div>
      <div class="config-item">
        <label for="valor-transferencia">Valor Mínimo de Transferência (R$):</label>
        <input type="number" id="valor-transferencia" min="0" step="0.01">
      </div>
      <div class="config-item">
        <label for="transferencia-automatica">Transferência Automática:</label>
        <select id="transferencia-automatica">
          <option value="desabilitado">Desabilitado</option>
          <option value="habilitado">Habilitado</option>
        </select>
      </div>
      <h4>Integração com APIs Externas</h4>
      <p>Nome: David Junior</p>
      <p>Chave Pix: i.davidjunior+mercadopago2@gmail.com</p>
      <p>CPF: 29760316811</p>
      <p>Banco: Mercado Pago</p>
      <div id="ultima-transferencia"></div>
    </div>

    <div class="panel full-width">
      <h3>Ações em Negociação</h3>
      <p class="panel-explanation">Visualize as ações em negociação, configure limites de ativos e modo de negociação, e veja os ativos mais lucrativos.</p>
      <div class="config-item">
        <label for="numero-contratos">Número de Contratos:</label>
        <input type="number" id="numero-contratos" min="1" value="1">
      </div>
      <div class="config-item">
        <label for="mercado-negociacao">Mercado de Negociação:</label>
        <select id="mercado-negociacao">
          <optgroup label="Mercado Nacional">
            <option value="acoes-b3">Ações (B3)</option>
            <option value="futuros-bmf">Contratos Futuros (BM&amp;F)</option>
            <option value="etfs">ETFs</option>
            <option value="opcoes">Opções</option>
            <option value="commodities-nacionais">Commodities Nacionais</option>
          </optgroup>
          <optgroup label="Mercados Internacionais">
            <option value="acoes-eua">Ações (EUA)</option>
            <option value="indices-internacionais">Índices Internacionais</option>
            <option value="forex">Forex</option>
            <option value="commodities-internacionais">Commodities Internacionais</option>
            <option value="criptomoedas">Criptomoedas</option>
          </optgroup>
        </select>
      </div>
      <div class="config-item">
        <label for="ativo-especifico">Ativo Específico:</label>
        <select id="ativo-especifico"></select>
      </div>
      <div class="config-item">
        <label for="limite-ativos">Limite de Ativos:</label>
        <input type="number" id="limite-ativos" min="1" value="5">
      </div>
      <table id="acoes-table">
        <thead>
          <tr>
            <th>Ação</th>
            <th>Volume</th>
            <th>Quantidade</th>
            <th>Valor (R$)</th>
            <th>Variação (%)</th>
          </tr>
        </thead>
        <tbody>
          <!-- Dados das ações serão inseridos aqui dinamicamente -->
        </tbody>
      </table>
      <div id="fundos-disponiveis"></div>
    </div>

    <div class="panel">
      <h3>Indicadores Técnicos</h3>
      <p class="panel-explanation">Este painel mostra os valores atuais dos indicadores técnicos utilizados pelo robô.</p>
      <div id="indicadores-tecnicos"></div>
    </div>

    <div class="panel">
      <h3>Explicação do Ajuste Automático</h3>
      <div id="explicacao-ajuste"></div>
    </div>

    <div class="panel full-width">
      <h3>Extrato de Operações em Tempo Real</h3>
      <p class="panel-explanation">Este painel mostra o extrato detalhado de todas as operações realizadas pelo robô, incluindo entradas e saídas.</p>
      <div id="transaction-log" style="max-height: 300px; overflow-y: auto;">
        <!-- Transaction log entries will be added here dynamically -->
      </div>
    </div>

    <div class="panel full-width">
      <h3>Central de Controle da Corretora</h3>
      <p class="panel-explanation">Gerencie as configurações e conexões com sua corretora de trading.</p>
      <div class="config-item">
        <label for="api-key">Chave da API:</label>
        <input type="text" id="api-key" placeholder="Insira sua chave da API">
      </div>
      <div class="config-item">
        <label for="secret-key">Chave Secreta:</label>
        <input type="password" id="secret-key" placeholder="Insira sua chave secreta">
      </div>
      <div class="config-item">
        <label for="corretora">Corretora:</label>
        <select id="corretora">
          <option value="">Selecione a corretora</option>
          <option value="xp">XP Investimentos</option>
          <option value="clear">Clear Corretora</option>
          <option value="rico">Rico Investimentos</option>
        </select>
      </div>
      <button onclick="conectarCorretora()">Conectar à Corretora</button>
      <div id="status-conexao"></div>
    </div>
  </div>
</div>

<script>
let saldoBruto = 0;
let saldoLiquido = 0;
let saldoTransferido = 0;
let investimentoInicial = 0;
let assertividade = 0;
let errosConsecutivos = 0;
let totalOperacoes = 0;
let operacoesSucesso = 0;
let acertosConsecutivos = 0;
let numAcertos = 0;
let numErros = 0;
let currentStrategy = '';
let consecutiveErrorsForStrategy = 0;
let limiteAtivos = 5;
let numeroContratos = 1; 
let startTime;
let currentStrategyStartTime;
let historicalData = [];
let focusedTasks = [];
let projections = [];
let lastDaySaldoLiquido = 0;
let proventosAcumulados = 0;

const mercadosEAtivos = {
  'acoes-b3': ['PETR4', 'VALE3', 'ITUB4', 'BBDC4', 'ABEV3'],
  'futuros-bmf': ['WIN', 'WDO', 'IND', 'DOL'],
  'etfs': ['BOVA11', 'SMAL11'],
  'opcoes': ['PETR4C', 'VALE3P', 'ITUB4C'],
  'commodities-nacionais': ['Café', 'Boi Gordo', 'Milho'],
  'acoes-eua': ['AAPL', 'AMZN', 'TSLA'],
  'indices-internacionais': ['SPX', 'DJIA', 'NDX'],
  'forex': ['EUR/USD', 'GBP/USD', 'USD/JPY'],
  'commodities-internacionais': ['XAU/USD', 'WTI', 'XAG/USD'],
  'criptomoedas': ['BTC/USD', 'ETH/USD', 'XRP/USD']
};

const estrategias = [
  {
    name: "Estratégia de Deep Learning para Previsão de Tendências",
    description: "Utiliza redes neurais profundas para prever tendências de mercado com base em dados históricos e em tempo real."
  },
  {
    name: "Ensemble de Algoritmos para Decisões de Trading",
    description: "Combina Random Forest, GBM e AdaBoost para tomar decisões de trading mais robustas e precisas."
  },
  {
    name: "Análise de Sentimento com Redes Neurais Recorrentes",
    description: "Aplica RNNs para analisar o sentimento do mercado a partir de notícias e mídias sociais."
  },
  {
    name: "Otimização de Portfólio com Algoritmos Genéticos",
    description: "Usa algoritmos genéticos para otimizar constantemente a composição do portfólio de investimentos."
  },
  {
    name: "Detecção de Anomalias com Clustering",
    description: "Emprega técnicas de clustering para identificar padrões anômalos e oportunidades de arbitragem."
  }
];

const indicadoresTecnicos = {
  RSI: { periodo: 14, sobrecompra: 70, sobrevenda: 30 },
  MACD: { periodoRapido: 12, periodoLento: 26, periodoSinal: 9 },
  BollingerBands: { periodo: 20, desviosPadrao: 2 },
  ADX: { periodo: 14, limiar: 25 }
};

function gerarInsightsRobo() {
  const insights = generatePromptBasedInsights();
  const insightsElement = document.getElementById('robot-insights');
  if (insightsElement) {
    insightsElement.innerHTML = '';
    insights.forEach((insight, index) => {
      const p = document.createElement('p');
      p.textContent = insight;
      p.id = `insight-${index}`;
      insightsElement.appendChild(p);
    });
  }
}

function atualizarEstatisticas() {
  const taxaAcerto = totalOperacoes > 0 ? (operacoesSucesso / totalOperacoes) * 100 : 0;
  const taxaErro = 100 - taxaAcerto;
  updateElementText('taxa-acerto', `${taxaAcerto.toFixed(2)}%`);
  updateElementText('taxa-erro', `${taxaErro.toFixed(2)}%`);
  updateElementText('num-acertos', numAcertos);
  updateElementText('num-erros', numErros);
  updateElementText('acertos-consecutivos', acertosConsecutivos);
  updateElementText('erros-consecutivos', errosConsecutivos);
  
  if (ultimaOperacao) {
    updateElementText('ultima-operacao', ultimaOperacao.toLocaleString());
  }
  
  const tempoMedioOperacao = numeroOperacoes > 0 ? tempoTotalOperacoes / numeroOperacoes : 0;
  updateElementText('tempo-medio-operacao', `${tempoMedioOperacao.toFixed(2)}s`);
  
  const roi = investimentoInicial > 0 ? ((saldoLiquido - investimentoInicial) / investimentoInicial) * 100 : 0;
  updateElementText('roi', `${roi.toFixed(2)}%`);
  
  updateElementText('estrategia-utilizada', currentStrategy);
}

function iniciarNegociacoes() {
  if (roboAtivo) {
    const inicioOperacao = new Date();
    const ganho = Math.random() > (1 - assertividade / 100);
    const ativoEspecifico = document.getElementById('ativo-especifico').value;
    const quantidadeAcoes = numeroContratos; 
    const valorOperacao = quantidadeAcoes * (Math.random() * 100 + 10);
    
    const operacao = {
      timestamp: new Date().toLocaleString(),
      tipo: ganho ? 'Compra' : 'Venda',
      ativo: ativoEspecifico,
      quantidade: quantidadeAcoes,
      preco: valorOperacao / quantidadeAcoes,
      total: valorOperacao
    };
    
    adicionarLogOperacao(operacao);
    
    if (ganho) {
      saldoBruto += valorOperacao * 0.02; 
      saldoLiquido += valorOperacao * 0.017; 
      errosConsecutivos = 0;
      acertosConsecutivos++;
      operacoesSucesso++;
      numAcertos++;
      consecutiveErrorsForStrategy = 0;
    } else {
      saldoBruto -= valorOperacao * 0.01; 
      saldoLiquido -= valorOperacao * 0.01;
      errosConsecutivos++;
      acertosConsecutivos = 0;
      numErros++;
      consecutiveErrorsForStrategy++;
    }
    
    totalOperacoes++;
    ultimaOperacao = new Date();
    tempoTotalOperacoes += (ultimaOperacao - inicioOperacao) / 1000; // Convert to seconds
    numeroOperacoes++;
    
    atualizarEstatisticas();
    atualizarSaldos();
    verificarTransferencia();
    atualizarTaxas();
    atualizarAcoes();
    atualizarNucleoNeural();
    
    atualizarModeloNegociacao();
    
    if (errosConsecutivos >= 2) {
      analisarConfluencias();
    } else {
      setTimeout(iniciarNegociacoes, 1000);
    }
  }
}
</script>
</body></html>
